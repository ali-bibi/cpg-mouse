{"__owner_id":"default-owner","data":{"BRAIN":["### The following can be removed when PyNN 0.8 has been established or we have a more elegant\n### solution\nfrom pkg_resources import parse_version\nimport pyNN\n\nif not parse_version(pyNN.__version__) >= parse_version('0.8.0'):\n\traise RuntimeError(\"The brain model requires PyNN 0.8.0 to be installed. The Platform is \"\n                       \"currently using %s\" % pyNN.__version__)\n### END: PyNN Version Check\n\nfrom hbp_nrp_cle.brainsim import simulator as sim\nimport numpy as np\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef create_brain():\n    SENSORPARAMS = {'cm': 0.025,\n                    'v_rest': -70.0,\n                    'tau_m': 10.0,\n                    'v_reset': -70.0,\n                    'v_thresh': -55.0,\n                    'tau_refrac': 10.0,\n                    'tau_syn_E': 30.0,\n                    'tau_syn_I': 30.0}\n\n    SYNAPSE_PARAMS = {'weight': 4.0,\n                      'delay': 0.1}\n    SYNAPSE_PARAMS_M = {'weight': 0.1,\n                      'delay': 0.1}\n    SYNAPSE_PARAMS_I = {'weight': -4.0,\n                      'delay': 0.1}\n    SYNAPSE_PARAMS_I_S = {'weight': -18.0,\n                      'delay': 0.1}\n\n    cell = sim.IF_curr_alpha(**SENSORPARAMS)\n\n    population = sim.Population(90, cell)\n    \n    popSize = 10\n\n    SYN = sim.StaticSynapse(**SYNAPSE_PARAMS)\n    SYNM = sim.StaticSynapse(**SYNAPSE_PARAMS_M)\n    SYNI = sim.StaticSynapse(**SYNAPSE_PARAMS_I)\n    SYNIS = sim.StaticSynapse(**SYNAPSE_PARAMS_I_S)\n\n    # Connect neurons\n    CON = sim.FixedProbabilityConnector(1)\n    ACON = sim.AllToAllConnector()\n    \n    hl = 10\n    fl = 20\n    fr = 30\n    hr = 40\n\n    length = 40\n    \n    flInh = length + fl\n    frInh = length + fr\n    hlInh = length + hl\n    hrInh = length + hl\n    \n    for x in range(1,5):\n        sim.Projection(presynaptic_population=population[x-1:x],\n                       postsynaptic_population=population[x*10:(x*10+popSize)],\n                       connector=ACON,\n                       synapse_type=SYN)\n        \n    for x in range(1,5):\n            sim.Projection(presynaptic_population=population[x*10:(x*10+popSize)],\n                   postsynaptic_population=population[x*10+length:(x*10+length+popSize)],\n                   connector=CON,\n                   synapse_type=SYN)\n            sim.Projection(presynaptic_population=population[x*10+length:(x*10+length+popSize)],\n                   postsynaptic_population=population[x*10:(x*10+popSize)],\n                   connector=CON,\n                   synapse_type=SYNIS)\n\n\n    \n    sim.Projection(presynaptic_population=population[fl:(fl+popSize)],\n                   postsynaptic_population=population[fr:(fr+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    sim.Projection(presynaptic_population=population[fr:(fr+popSize)],\n                   postsynaptic_population=population[fl:(fl+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    \n    sim.Projection(presynaptic_population=population[fr:(fr+popSize)],\n                   postsynaptic_population=population[hr:(hr+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    sim.Projection(presynaptic_population=population[hr:(hr+popSize)],\n                   postsynaptic_population=population[fr:(fr+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    \n    sim.Projection(presynaptic_population=population[hr:(hr+popSize)],\n                   postsynaptic_population=population[hl:(hl+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    sim.Projection(presynaptic_population=population[hl:(hl+popSize)],\n                   postsynaptic_population=population[hr:(hr+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    \n    sim.Projection(presynaptic_population=population[hl:(hl+popSize)],\n                   postsynaptic_population=population[fl:(fl+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    sim.Projection(presynaptic_population=population[fl:(fl+popSize)],\n                   postsynaptic_population=population[hl:(hl+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    \n    sim.Projection(presynaptic_population=population[fr:(fr+popSize)],\n                   postsynaptic_population=population[hl:(hl+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    sim.Projection(presynaptic_population=population[hl:(hl+popSize)],\n                   postsynaptic_population=population[fr:(fr+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    \n    sim.Projection(presynaptic_population=population[fl:(fl+popSize)],\n                   postsynaptic_population=population[hr:(hr+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    sim.Projection(presynaptic_population=population[hr:(hr+popSize)],\n                   postsynaptic_population=population[fl:(fl+popSize)],\n                   connector=CON,\n                   synapse_type=SYNI)\n    \n    \n    \n\n\n    sim.Projection(presynaptic_population=population[hl:(hl+popSize)],\n                   postsynaptic_population=population[5:6],\n                   connector=ACON,\n                   synapse_type=SYNM)\n    sim.Projection(presynaptic_population=population[fl:(fl+popSize)],\n                   postsynaptic_population=population[6:7],\n                   connector=ACON,\n                   synapse_type=SYNM)\n    sim.Projection(presynaptic_population=population[fr:(fr+popSize)],\n                   postsynaptic_population=population[7:8],\n                   connector=ACON,\n                   synapse_type=SYNM)\n    sim.Projection(presynaptic_population=population[hr:(hr+popSize)],\n                   postsynaptic_population=population[8:9],\n                   connector=ACON,\n                   synapse_type=SYNM)\n\n    sim.initialize(population, v=population.get('v_rest'))\n\n    return population\n\n\ncircuit = create_brain()\n",[{"to":90,"step":1,"from":0,"name":"record","regex":"^\\b(?!\\bsensors\\b|\\bactors\\b)([A-z_]+[\\w_]*)$"},{"to":4,"step":1,"from":0,"name":"sensors","regex":"^\\b(?!\\brecord\\b|\\bactors\\b)([A-z_]+[\\w_]*)$"},{"to":9,"step":1,"from":5,"name":"actors","regex":"^\\b(?!\\brecord\\b|\\bsensors\\b)([A-z_]+[\\w_]*)$"}]]}}