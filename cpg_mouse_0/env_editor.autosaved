{"__owner_id":"default-owner","data":{"BRAIN":["### The following can be removed when PyNN 0.8 has been established or we have a more elegant\n### solution\nfrom pkg_resources import parse_version\nimport pyNN\n\nif not parse_version(pyNN.__version__) >= parse_version('0.8.0'):\n\traise RuntimeError(\"The brain model requires PyNN 0.8.0 to be installed. The Platform is \"\n                       \"currently using %s\" % pyNN.__version__)\n### END: PyNN Version Check\n\nfrom hbp_nrp_cle.brainsim import simulator as sim\nimport numpy as np\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef create_brain():\n    SENSORPARAMS = {'cm': 0.025,\n                    'v_rest': -70.0,\n                    'tau_m': 10.0,\n                    'v_reset': -70.0,\n                    'v_thresh': -55.0,\n                    'tau_refrac': 10.0,\n                    'tau_syn_E': 30.0,\n                    'tau_syn_I': 30.0}\n\n    SYNAPSE_PARAMS = {'weight': 4.0,\n                      'delay': 0.1}\n    SYNAPSE_PARAMS_M = {'weight': 0.05,\n                      'delay': 0.1}\n    SYNAPSE_PARAMS_I = {'weight': -18.0,\n                      'delay': 0.1}\n    SYNAPSE_PARAMS_I_S = {'weight': -12.0,\n                      'delay': 0.1}\n\n    cell = sim.IF_curr_alpha(**SENSORPARAMS)\n\n    population = sim.Population(8, cell)\n\n    SYN = sim.StaticSynapse(**SYNAPSE_PARAMS)\n    SYNM = sim.StaticSynapse(**SYNAPSE_PARAMS_M)\n    SYNI = sim.StaticSynapse(**SYNAPSE_PARAMS_I)\n    SYNIS = sim.StaticSynapse(**SYNAPSE_PARAMS_I_S)\n\n    # Connect neurons\n    CON = sim.OneToOneConnector()\n\n    sim.Projection(presynaptic_population=population[0:],\n                   postsynaptic_population=population[4:],\n                   connector=CON,\n                   synapse_type=SYN)\n    sim.Projection(presynaptic_population=population[1:],\n                   postsynaptic_population=population[5:],\n                   connector=CON,\n                   synapse_type=SYN)\n\n    sim.Projection(presynaptic_population=population[4:],\n                   postsynaptic_population=population[6:],\n                   connector=CON,\n                   synapse_type=SYN)\n    sim.Projection(presynaptic_population=population[5:],\n                   postsynaptic_population=population[7:],\n                   connector=CON,\n                   synapse_type=SYN)\n\n    sim.Projection(presynaptic_population=population[7:],\n                   postsynaptic_population=population[5:],\n                   connector=CON,\n                   synapse_type=SYNIS)\n    sim.Projection(presynaptic_population=population[6:],\n                   postsynaptic_population=population[4:],\n                   connector=CON,\n                   synapse_type=SYNIS)\n    \n    sim.Projection(presynaptic_population=population[6:],\n                   postsynaptic_population=population[7:],\n                   connector=CON,\n                   synapse_type=SYNI)\n    sim.Projection(presynaptic_population=population[7:],\n                   postsynaptic_population=population[6:],\n                   connector=CON,\n                   synapse_type=SYNI)\n\n    sim.Projection(presynaptic_population=population[4:],\n                   postsynaptic_population=population[2:],\n                   connector=CON,\n                   synapse_type=SYNM)\n    sim.Projection(presynaptic_population=population[5:],\n                   postsynaptic_population=population[3:],\n                   connector=CON,\n                   synapse_type=SYNM)\n\n    sim.initialize(population, v=population.get('v_rest'))\n\n    return population\n\n\ncircuit = create_brain()\n",[{"to":8,"step":1,"from":0,"name":"record","regex":"^\\b(?!\\bsensors\\b|\\bactors\\b)([A-z_]+[\\w_]*)$"},{"to":2,"step":1,"from":0,"name":"sensors","regex":"^\\b(?!\\brecord\\b|\\bactors\\b)([A-z_]+[\\w_]*)$"},{"to":4,"step":1,"from":2,"name":"actors","regex":"^\\b(?!\\brecord\\b|\\bsensors\\b)([A-z_]+[\\w_]*)$"}]]}}